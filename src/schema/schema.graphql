enum UserRole {
  ADMIN
  USER
  GUEST
}

type User {
  id: ID!
  username: String!
  role: UserRole!
  createdAt: String!
  cart: Cart
}

type SignupResponse {
  id: ID!
  username: String!
  role: UserRole!
}

type SigninResponse {
  token: String!
}

type Category {
  id: ID!
  name: String!
  createdAt: String!
  products: [Product]
}

type Product {
  id: ID!
  name: String!
  price: Float!
  imageUrl: String
  disabled: Boolean!
  createdAt: String!
  category: Category
}

type Cart {
  id: ID!
  user: User!
  items: [CartItem]!
}

type CartItem {
  id: ID!
  product: Product!
  quantity: Int!
}

input AddToCartRequest {
  productId: ID!
  quantity: Int!
}

input CreateProductRequest {
  name: String!
  price: Float!
  categoryId: ID!
  imageUrl: String
  disabled: Boolean
}

input UpdateProductRequest {
  id: ID!
  name: String
  price: Float
  imageUrl: String
  disabled: Boolean
  categoryId: ID
}

type CategoryPage {
  categories: [Category]
  totalCount: Int
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type ProductPage {
  products: [Product]
  totalCount: Int
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

type Order {
  id: ID!
  user: User!
  items: [OrderItem]!
  createdAt: String!
  modifiedAt: String!
  status: OrderStatus!
}

type OrderItem {
  id: ID!
  product: Product!
  quantity: Int!
}

type Query {
  getUser(id: ID!): User
  getUsers: [User]
  getCategory(id: ID!): Category
  getCategories(limit: Int, offset: Int): CategoryPage
  getProduct(id: ID!): Product
  getProducts(limit: Int, offset: Int): ProductPage
  getProductsByCategoryId(id: ID!, limit: Int, offset: Int): ProductPage
  getCart(userId: ID!): Cart
  getOrder(id: ID!): Order
  getUserOrders(userId: ID): [Order]
  getUsersOrders(limit: Int, offset: Int): [Order]
}

type Mutation {
  signup(username: String!, password: String!, role: UserRole!): SignupResponse
  signin(username: String!, password: String!): SigninResponse
  createCategory(name: String!): Category
  createProduct(input: CreateProductRequest!): Product
  updateProduct(input: UpdateProductRequest!): Product
  deleteProduct(id: ID!): Boolean
  likeProduct(id: ID!): [Product]
  addToCart(input: AddToCartRequest!): Cart
  createOrder(userId: ID): Order
  updateOrderStatus(id: ID!, status: OrderStatus!): Order
}
